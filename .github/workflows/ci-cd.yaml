name: CI/CD Pipeline
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly Sundays
jobs:
  build-test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker
      run: docker build -t vw-backend /app
    - name: Run Tests
      run: |
        cd app
        pip install -r requirements.txt
        pytest
  build-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker
      run: docker build -t vw-frontend /
    - name: Run Tests
      run: |
        npm install
        npm test
  deploy:
    needs: [build-test-backend, build-test-frontend]  # Only if tests pass
    if: github.ref == 'refs/heads/main'  # Only on main pushes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, Tag, Push Backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_BACKEND_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Tag and push current image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Tag previous image (if exists, move latest to previous)
        aws ecr describe-images --repository-name vw-backend --query 'imageIds[?imageTags[0]==`latest`]' --output text | awk '{print $1}' | xargs -I {} aws ecr tag --repository-name vw-backend --image-id {} --tags "previous"
        aws ecr push $ECR_REGISTRY/$ECR_REPOSITORY:previous

    - name: Build, Tag, Push Frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_FRONTEND_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG frontend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        aws ecr describe-images --repository-name vw-frontend --query 'imageIds[?imageTags[0]==`latest`]' --output text | awk '{print $1}' | xargs -I {} aws ecr tag --repository-name vw-frontend --image-id {} --tags "previous"
        aws ecr push $ECR_REGISTRY/$ECR_REPOSITORY:previous
    - name: Update ECS Backend
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_BACKEND_SERVICE }} --force-new-deployment
    - name: Update ECS Frontend
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_FRONTEND_SERVICE }} --force-new-deployment